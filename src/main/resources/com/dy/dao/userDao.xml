<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<!-- mapper 为根元素节点， 一个namespace对应一个dao -->
<mapper namespace="com.dy.dao.UserDao">


    <!-- 1. id （必须配置）
      id是命名空间中的唯一标识符，可被用来代表这条语句。
      一个命名空间（namespace） 对应一个dao接口,
      这个id也应该对应dao里面的某个方法（相当于方法的实现），因此id 应该与方法名一致 -->

    <!-- 2. parameterType （可选配置, 默认为mybatis自动选择处理）
      将要传入语句的参数的完全限定类名或别名， 如果不配置，mybatis会通过ParameterHandler 根据参数类型默认选择合适的typeHandler进行处理
      parameterType 主要指定参数类型，可以是int, short, long, string等类型，也可以是复杂类型（如对象） -->

    <!-- 3. flushCache （可选配置，默认配置为true）
      将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句） -->

    <!-- 4. statementType （可选配置，默认配置为PREPARED）
      STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 -->

    <!-- 5. keyProperty (可选配置， 默认为unset)
      （仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 -->

    <!-- 6. keyColumn     (可选配置)
      （仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 -->

    <!-- 7. useGeneratedKeys (可选配置， 默认为false)
      （仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。  -->

    <!-- 8. timeout  (可选配置， 默认为unset, 依赖驱动)
      这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。 -->
        <select  resultType="user" id="findUserById">
            select * from user where id = #{id}
        </select>
        <!-- 对应userDao中的insertUser方法，  -->
        <insert  parameterType="user" id="insertUser">
            insert into user(id, name, password, age, deleteFlag)
            values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})
        </insert>

        <!-- 对应userDao中的updateUser方法 -->
        <update  parameterType="user" id="updateUser">
            update user set name = #{name}, password = #{password}, age = #{age}, deleteFlag = #{deleteFlag}
            where id = #{id};
        </update>

        <!-- 对应userDao中的deleteUser 方法 -->
        <delete  parameterType="user" id="deleteUser">
            delete from user where id = #{id};
        </delete>

    <!--练习foreach使用-->
    <select resultType="_int" parameterType="list" id="countByUserList">
        select count(*) from users
        <where>
            id in
            <foreach item="item" collection="list" separator="," open="(" close=")" index="">
                #{item.id, jdbcType=NUMERIC}
            </foreach>
        </where>
    </select>

    <!--
     * 
     *@Description:批量插入map中数据
     *
     * @auther: yuanmaojun
     * @date: 2018.8.17 9:13
     *下面如果写成open="(" close=")" sql拼成：insert into users(id,name) VALUES ( 8,? , 9,? )
     *                                正确：insert into users(id,name) VALUES (8,?) , (9,?)
    -->
    <insert parameterType="java.util.HashMap" id="patchInsert">
        insert into users(id,name) VALUES
        <foreach   item="key" collection="params.keys" open=""  separator="," close="">
            (${key},#{params[${key}]})
        </foreach>
    </insert>

    <!--
     * 
     *@Description:研究foreach遍历map进行批量插入-下面有bug-参数错误。
     *
     * @auther: yuanmaojun
     * @date: 2018.8.17 15:58
    -->
    <insert parameterType="java.util.HashMap" id="patchInsert2">
        insert into users(id,name) VALUES
        <foreach  collection="map" index="index" item="item" open=""  separator="," close="">
            (#{index},#{item[${key}]})
        </foreach>
    </insert>
</mapper>